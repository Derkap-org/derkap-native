import React, { useState, useRef } from "react";
import {
  Alert,
  Text,
  View,
  AppState,
  ScrollView,
  TouchableWithoutFeedback,
  Keyboard,
  Pressable,
} from "react-native";
import { supabase } from "@/lib/supabase";
import { Link, router } from "expo-router";
import { TextInput } from "react-native";
import Checkbox from "expo-checkbox";
import Button from "./Button";
import SwipeModal, {
  SwipeModalPublicMethods,
} from "@birdwingo/react-native-swipe-modal";
import { EyeOff, Eye } from "lucide-react-native";

// Tells Supabase Auth to continuously refresh the session automatically if
// the app is in the foreground. When this is added, you will continue to receive
// `onAuthStateChange` events with the `TOKEN_REFRESHED` or `SIGNED_OUT` event
// if the user's session is terminated. This should only be registered once.
AppState.addEventListener("change", (state) => {
  if (state === "active") {
    supabase.auth.startAutoRefresh();
  } else {
    supabase.auth.stopAutoRefresh();
  }
});

export default function Auth() {
  const [isSignIn, setIsSignIn] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirmation, setPasswordConfirmation] = useState("");
  const [username, setUsername] = useState("");
  const [cguChecked, setChecked] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isPasswordVisible, setPasswordVisible] = useState(false);
  const [isPasswordConfirmationVisible, setPasswordConfirmationVisible] =
    useState(false);

  const modalCGURef = useRef<SwipeModalPublicMethods>(null);

  const showCGUModal = () => modalCGURef.current?.show();

  async function signInWithEmail() {
    try {
      setLoading(true);
      const { error } = await supabase.auth.signInWithPassword({
        email: email,
        password: password,
      });

      setLoading(false);
      if (error) console.error(error);
      else {
        router.push("/");
      }
    } catch (error) {
      Alert.alert("Erreur", "Email ou mot de passe incorrect.");
      console.error(error);
    } finally {
      setLoading(false);
    }
  }

  async function signUpWithEmail() {
    try {
      if (!cguChecked) {
        Alert.alert("Erreur", "Veuillez accepter les CGU pour continuer.");
        return;
      }

      setLoading(true);

      if (password !== passwordConfirmation) {
        Alert.alert("Erreur", "Les mots de passe ne correspondent pas.");
        return;
      }
      const {
        data: { session },
        error,
      } = await supabase.auth.signUp({
        email: email,
        password: password,
        options: { data: { username: username } },
      });

      if (error) console.error(error);
      router.push({
        pathname: "/confirm-email",
        params: { email: email },
      });
    } catch (error) {
      Alert.alert("Erreur", error.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <View className="relative flex-col items-center justify-center flex-1 w-full gap-y-20">
        <Text className="text-5xl text-center font-grotesque">
          Bienvenue sur {"\n"} Derkap ! üëã
        </Text>

        <View className="flex flex-col w-96 gap-y-4">
          <TextInput
            // label="Email"
            // leftIcon={{ type: "font-awesome", name: "envelope" }}
            onChangeText={(text) => setEmail(text)}
            value={email}
            placeholder="Email"
            autoCapitalize={"none"}
            className="w-full h-16 p-2 bg-white border border-gray-300 rounded-xl placeholder:text-gray-500"
          />
          {!isSignIn && (
            <TextInput
              // label="Username"
              // leftIcon={{ type: "font-awesome", name: "user" }}
              onChangeText={(text) => setUsername(text)}
              value={username}
              placeholder="Pseudo"
              autoCapitalize={"none"}
              className="w-full h-16 p-2 bg-white border border-gray-300 rounded-xl placeholder:text-gray-500"
            />
          )}

          <View className="flex flex-row items-center justify-between relative w-full bg-white border border-gray-300 rounded-xl pr-2">
            <TextInput
              // label="Password"
              // leftIcon={{ type: "font-awesome", name: "lock" }}
              onChangeText={(text) => setPassword(text)}
              value={password}
              secureTextEntry={!isPasswordVisible}
              placeholder="Mot de passe"
              autoCapitalize={"none"}
              className="w-10/12 h-16 p-2 placeholder:text-gray-500"
            />
            {isPasswordVisible ? (
              <Eye
                size={24}
                className=""
                color={"#000"}
                onPress={() => setPasswordVisible(false)}
              />
            ) : (
              <EyeOff
                size={24}
                color={"#000"}
                className=""
                onPress={() => setPasswordVisible(true)}
              />
            )}
          </View>

          {!isSignIn && (
            <View className="flex flex-row items-center justify-between relative w-full bg-white border border-gray-300 rounded-xl pr-2">
              <TextInput
                onChangeText={(text) => setPasswordConfirmation(text)}
                value={passwordConfirmation}
                secureTextEntry={!isPasswordConfirmationVisible}
                placeholder="Confirmer le mot de passe"
                autoCapitalize={"none"}
                className="w-10/12 h-16 p-2 placeholder:text-gray-500"
              />
              {isPasswordConfirmationVisible ? (
                <Eye
                  size={24}
                  className=""
                  color={"#000"}
                  onPress={() => setPasswordConfirmationVisible(false)}
                />
              ) : (
                <EyeOff
                  size={24}
                  color={"#000"}
                  className=""
                  onPress={() => setPasswordConfirmationVisible(true)}
                />
              )}
            </View>
          )}

          {!isSignIn && (
            <View className="flex flex-row items-center gap-x-2">
              <Checkbox
                value={cguChecked}
                onValueChange={setChecked}
                style={{ height: 16, width: 16, borderRadius: "100%" }}
              />
              <Text>
                J'accepte les{" "}
                <Text onPress={showCGUModal} className="underline">
                  CGU
                </Text>
              </Text>
            </View>
          )}

          <View className="flex flex-row justify-end">
            {isSignIn && (
              <Link
                className="text-[#9747ff]"
                href={{
                  pathname: "/password-forgotten",
                }}
              >
                Mot de passe oubli√© ?
              </Link>
            )}
          </View>

          <View className="">
            {isSignIn ? (
              <Button
                withLoader={true}
                text="Connexion"
                isCancel={loading}
                onClick={signInWithEmail}
              />
            ) : (
              <Button
                text="Inscription"
                isCancel={loading}
                withLoader={true}
                onClick={signUpWithEmail}
              />
            )}
          </View>

          <View className="flex flex-row justify-start">
            {isSignIn ? (
              <Pressable
                onPress={() => setIsSignIn(false)}
                className="cursor-pointer"
              >
                <Text>
                  Pas encore de compte ?{" "}
                  <Text className="text-[#9747ff]">Inscris-toi !</Text>
                </Text>
              </Pressable>
            ) : (
              <Pressable
                onPress={() => setIsSignIn(true)}
                className="cursor-pointer "
              >
                <Text>
                  D√©j√† un compte ?{" "}
                  <Text className="text-[#9747ff]">Connecte-toi !</Text>
                </Text>
              </Pressable>
            )}
          </View>
        </View>

        <SwipeModal
          ref={modalCGURef}
          showBar
          maxHeight={600}
          bg="white"
          style={{ borderTopLeftRadius: 20, borderTopRightRadius: 20 }}
          wrapInGestureHandlerRootView
        >
          <ScrollView className="flex flex-col px-10 py-10 bg-white gap-y-4">
            <Text className="text-2xl font-bold">
              Conditions G√©n√©rales d'Utilisation (CGU) de Derkap {"\n"}
            </Text>
            <Text>
              1. Pr√©sentation de l'Application {"\n"}
              Derkap est une application mobile permettant aux utilisateurs de
              cr√©er et de participer √† des challenges photo entre amis. Editeur
              : Derkap Si√®ge social : Paris, France Contact :
              contact.derkap@gmail.com L'utilisation de l'application implique
              l'acceptation sans r√©serve des pr√©sentes Conditions G√©n√©rales
              d'Utilisation (CGU). {"\n"} {"\n"}
              2. Acc√®s et Utilisation de l'Application {"\n"}
              L'application est accessible uniquement aux utilisateurs √¢g√©s d'au
              moins 16 ans. L'utilisateur est seul responsable du contenu qu'il
              publie et doit respecter les lois en vigueur. Les d√©fis ne sont
              pas mod√©r√©s par Derkap avant leur publication. Les utilisateurs
              s'engagent √† ne pas proposer ou r√©aliser des d√©fis dangereux,
              ill√©gaux, discriminatoires, violents ou portant atteinte √† la
              dignit√© d'autrui. {"\n"} {"\n"}
              3. Contenus Autoris√©s et Responsabilit√© {"\n"}
              Sont interdits : contenus √† caract√®re violent, haineux,
              diffamatoire, discriminatoire, incitant √† la haine ou portant
              atteinte √† la vie priv√©e. Aucune nudit√© ou contenu sexuellement
              explicite n'est tol√©r√©. Derkap ne peut √™tre tenu responsable des
              publications des utilisateurs. Un syst√®me de signalement est en
              place pour notifier les abus. Derkap se r√©serve le droit de
              supprimer un contenu ou de bannir un utilisateur ne respectant pas
              ces r√®gles. {"\n"} {"\n"}
              4. Protection des Donn√©es Personnelles {"\n"}
              Donn√©es collect√©es : email, photos partag√©es dans les groupes. Les
              photos sont chiffr√©es pour garantir la vie priv√©e des
              utilisateurs. Derkap ne vend ni ne partage les donn√©es des
              utilisateurs avec des tiers. L'utilisateur peut demander la
              suppression de son compte et de ses donn√©es en envoyant un email √†
              contact.derkap@gmail.com. Derkap ne peut √™tre tenu responsable en
              cas de piratage ou de fuite de donn√©es. {"\n"} {"\n"}
              5. Mon√©tisation {"\n"}
              Derkap ne contient ni publicit√© ni achats int√©gr√©s √† sa cr√©ation,
              mais se r√©serve le droit d'en inclure √† l'avenir. {"\n"} {"\n"}
              6. Sanctions et R√©siliation {"\n"}
              En cas de non-respect des r√®gles, Derkap se r√©serve le droit de
              suspendre ou supprimer le compte de l'utilisateur sans pr√©avis.{" "}
              {"\n"} {"\n"}
              7. Responsabilit√©s {"\n"}
              Derkap ne peut √™tre tenu responsable des comportements abusifs des
              utilisateurs. L'application est fournie "en l'√©tat" sans garantie
              de fonctionnement continu. Les utilisateurs sont responsables de
              leur propre utilisation et des cons√©quences de leurs publications.{" "}
              {"\n"} {"\n"}
              8. Modification des CGU Derkap {"\n"}
              se r√©serve le droit de modifier ces CGU √† tout moment. Les
              utilisateurs en seront inform√©s via l'application. {"\n"} {"\n"}
              En utilisant Derkap, vous reconnaissez avoir lu et accept√© ces
              CGU. En cas de non-respect, votre acc√®s √† l'application pourra
              √™tre restreint ou supprim√©. {"\n"}
              Derni√®re mise √† jour : 03/02/2025
            </Text>
          </ScrollView>
        </SwipeModal>
      </View>
    </TouchableWithoutFeedback>
  );
}
