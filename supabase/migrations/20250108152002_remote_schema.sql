drop trigger if exists "auto_update_challenge_status_to_voting" on "public"."post";

drop trigger if exists "on_new_post_added" on "public"."post";

revoke delete on table "public"."post" from "anon";

revoke insert on table "public"."post" from "anon";

revoke references on table "public"."post" from "anon";

revoke select on table "public"."post" from "anon";

revoke trigger on table "public"."post" from "anon";

revoke truncate on table "public"."post" from "anon";

revoke update on table "public"."post" from "anon";

revoke delete on table "public"."post" from "authenticated";

revoke insert on table "public"."post" from "authenticated";

revoke references on table "public"."post" from "authenticated";

revoke select on table "public"."post" from "authenticated";

revoke trigger on table "public"."post" from "authenticated";

revoke truncate on table "public"."post" from "authenticated";

revoke update on table "public"."post" from "authenticated";

revoke delete on table "public"."post" from "service_role";

revoke insert on table "public"."post" from "service_role";

revoke references on table "public"."post" from "service_role";

revoke select on table "public"."post" from "service_role";

revoke trigger on table "public"."post" from "service_role";

revoke truncate on table "public"."post" from "service_role";

revoke update on table "public"."post" from "service_role";

alter table "public"."post" drop constraint "post_challenge_id_fkey";

alter table "public"."post" drop constraint "post_profile_id_fkey";

alter table "public"."vote" drop constraint "vote_post_id_fkey";

alter table "public"."post" drop constraint "post_pkey";

drop index if exists "public"."post_pkey";

drop table "public"."post";

create table "public"."encrypted_post" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "encrypted_data" text,
    "iv" text,
    "challenge_id" bigint,
    "profile_id" uuid
);


CREATE UNIQUE INDEX encrypted_photo_pkey ON public.encrypted_post USING btree (id);

CREATE UNIQUE INDEX encrypted_photo_unique_challenge_profile ON public.encrypted_post USING btree (challenge_id, profile_id);

alter table "public"."encrypted_post" add constraint "encrypted_photo_pkey" PRIMARY KEY using index "encrypted_photo_pkey";

alter table "public"."encrypted_post" add constraint "encrypted_photo_challenge_id_fkey" FOREIGN KEY (challenge_id) REFERENCES challenge(id) not valid;

alter table "public"."encrypted_post" validate constraint "encrypted_photo_challenge_id_fkey";

alter table "public"."encrypted_post" add constraint "encrypted_photo_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profile(id) not valid;

alter table "public"."encrypted_post" validate constraint "encrypted_photo_profile_id_fkey";

alter table "public"."encrypted_post" add constraint "encrypted_photo_unique_challenge_profile" UNIQUE using index "encrypted_photo_unique_challenge_profile";

alter table "public"."vote" add constraint "vote_post_id_fkey" FOREIGN KEY (post_id) REFERENCES encrypted_post(id) not valid;

alter table "public"."vote" validate constraint "vote_post_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_challenge_status_to_voting()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    challenge_group_id BIGINT;
    post_count INTEGER;
    group_user_count INTEGER;
BEGIN
    -- Get the group_id for the challenge
    SELECT group_id INTO challenge_group_id
    FROM challenge
    WHERE id = NEW.challenge_id;

    -- Get the count of posts for this challenge (using encrypted_post table)
    SELECT COUNT(*) INTO post_count
    FROM encrypted_post
    WHERE challenge_id = NEW.challenge_id;

    -- Get the count of users in the group
    SELECT get_group_user_count(challenge_group_id) INTO group_user_count;

    -- If post count equals group user count, update challenge status to 'voting'
    IF post_count = group_user_count THEN
        UPDATE challenge
        SET status = 'voting'
        WHERE id = NEW.challenge_id AND status = 'posting';
    END IF;

    RETURN NEW;
END;
$function$
;

grant delete on table "public"."encrypted_post" to "anon";

grant insert on table "public"."encrypted_post" to "anon";

grant references on table "public"."encrypted_post" to "anon";

grant select on table "public"."encrypted_post" to "anon";

grant trigger on table "public"."encrypted_post" to "anon";

grant truncate on table "public"."encrypted_post" to "anon";

grant update on table "public"."encrypted_post" to "anon";

grant delete on table "public"."encrypted_post" to "authenticated";

grant insert on table "public"."encrypted_post" to "authenticated";

grant references on table "public"."encrypted_post" to "authenticated";

grant select on table "public"."encrypted_post" to "authenticated";

grant trigger on table "public"."encrypted_post" to "authenticated";

grant truncate on table "public"."encrypted_post" to "authenticated";

grant update on table "public"."encrypted_post" to "authenticated";

grant delete on table "public"."encrypted_post" to "service_role";

grant insert on table "public"."encrypted_post" to "service_role";

grant references on table "public"."encrypted_post" to "service_role";

grant select on table "public"."encrypted_post" to "service_role";

grant trigger on table "public"."encrypted_post" to "service_role";

grant truncate on table "public"."encrypted_post" to "service_role";

grant update on table "public"."encrypted_post" to "service_role";

CREATE TRIGGER auto_update_challenge_status_to_voting AFTER INSERT ON public.encrypted_post FOR EACH ROW EXECUTE FUNCTION update_challenge_status_to_voting();


